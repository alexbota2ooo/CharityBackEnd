// <auto-generated />
using System;
using CharityAPI.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CharityAPI.Migrations
{
    [DbContext(typeof(CharityDbContext))]
    [Migration("20230407072501_Charity update + fundraising")]
    partial class Charityupdatefundraising
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CharityAPI.Entities.Charities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnnualReportLink")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<decimal>("Efficiency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Financials")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Leadership")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LeadershipDescription")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Mail")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NumFavorites")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("SocialResponsibilityRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TargetGroup")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Vetted")
                        .HasColumnType("bit");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Charities");
                });

            modelBuilder.Entity("CharityAPI.Entities.CharityProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CharityId");

                    b.ToTable("CharityProgram");
                });

            modelBuilder.Entity("CharityAPI.Entities.CharityReviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharityId");

                    b.HasIndex("UserId");

                    b.ToTable("CharityReviews");
                });

            modelBuilder.Entity("CharityAPI.Entities.Donations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CharityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CharityId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("CharityAPI.Entities.Favorites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharityId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharityId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("CharityAPI.Entities.UserDonations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DonationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DonationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDonations");
                });

            modelBuilder.Entity("CharityAPI.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CharityAPI.Entities.CharityProgram", b =>
                {
                    b.HasOne("CharityAPI.Entities.Charities", "Charity")
                        .WithMany("CharityPrograms")
                        .HasForeignKey("CharityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Charity");
                });

            modelBuilder.Entity("CharityAPI.Entities.CharityReviews", b =>
                {
                    b.HasOne("CharityAPI.Entities.Charities", "Charity")
                        .WithMany("CharityReviews")
                        .HasForeignKey("CharityId")
                        .IsRequired()
                        .HasConstraintName("FK_CharityReviews_Charity");

                    b.HasOne("CharityAPI.Entities.Users", "User")
                        .WithMany("CharityReviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CharityReviews_User");

                    b.Navigation("Charity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CharityAPI.Entities.Donations", b =>
                {
                    b.HasOne("CharityAPI.Entities.Charities", "Charity")
                        .WithMany("Donations")
                        .HasForeignKey("CharityId")
                        .IsRequired()
                        .HasConstraintName("FK_Donations_Charity");

                    b.Navigation("Charity");
                });

            modelBuilder.Entity("CharityAPI.Entities.Favorites", b =>
                {
                    b.HasOne("CharityAPI.Entities.Charities", "Charity")
                        .WithMany("Favorites")
                        .HasForeignKey("CharityId")
                        .IsRequired()
                        .HasConstraintName("FK_Favorites_Charity");

                    b.HasOne("CharityAPI.Entities.Users", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Favorites_User");

                    b.Navigation("Charity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CharityAPI.Entities.UserDonations", b =>
                {
                    b.HasOne("CharityAPI.Entities.Donations", "Donation")
                        .WithMany("UserDonations")
                        .HasForeignKey("DonationId")
                        .IsRequired()
                        .HasConstraintName("FK_UserDonations_Donation");

                    b.HasOne("CharityAPI.Entities.Users", "User")
                        .WithMany("UserDonations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserDonations_User");

                    b.Navigation("Donation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CharityAPI.Entities.Charities", b =>
                {
                    b.Navigation("CharityPrograms");

                    b.Navigation("CharityReviews");

                    b.Navigation("Donations");

                    b.Navigation("Favorites");
                });

            modelBuilder.Entity("CharityAPI.Entities.Donations", b =>
                {
                    b.Navigation("UserDonations");
                });

            modelBuilder.Entity("CharityAPI.Entities.Users", b =>
                {
                    b.Navigation("CharityReviews");

                    b.Navigation("Favorites");

                    b.Navigation("UserDonations");
                });
#pragma warning restore 612, 618
        }
    }
}
