// <auto-generated />
using System;
using CharityAPI.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CharityAPI.Migrations
{
    [DbContext(typeof(CharityDbContext))]
    [Migration("20230402140411_relationship mapping")]
    partial class relationshipmapping
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CharityAPI.Entities.Charities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("efficiency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("leadership")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("num_favorites")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("sector")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("social_responsibility_rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("target_group")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Charities");
                });

            modelBuilder.Entity("CharityAPI.Entities.Donations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CharityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CharityId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("CharityAPI.Entities.UserDonations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DonationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DonationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDonations");
                });

            modelBuilder.Entity("CharityAPI.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CharityAPI.Entities.Donations", b =>
                {
                    b.HasOne("CharityAPI.Entities.Charities", "Charities")
                        .WithMany("Donations")
                        .HasForeignKey("CharityId")
                        .IsRequired()
                        .HasConstraintName("FK_Donations_Charity");

                    b.Navigation("Charities");
                });

            modelBuilder.Entity("CharityAPI.Entities.UserDonations", b =>
                {
                    b.HasOne("CharityAPI.Entities.Donations", "Donations")
                        .WithMany("UserDonations")
                        .HasForeignKey("DonationId")
                        .IsRequired()
                        .HasConstraintName("FK_UserDonations_Donation");

                    b.HasOne("CharityAPI.Entities.Users", "Users")
                        .WithMany("UserDonations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserDonations_User");

                    b.Navigation("Donations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CharityAPI.Entities.Charities", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("CharityAPI.Entities.Donations", b =>
                {
                    b.Navigation("UserDonations");
                });

            modelBuilder.Entity("CharityAPI.Entities.Users", b =>
                {
                    b.Navigation("UserDonations");
                });
#pragma warning restore 612, 618
        }
    }
}
